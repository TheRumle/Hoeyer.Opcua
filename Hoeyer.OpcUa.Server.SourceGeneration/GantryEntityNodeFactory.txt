using Hoeyer.OpcUa.Core;
using MyOpcUaWebApplication;
using Opc.Ua;
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

using Hoeyer.OpcUa.Core.Observation;
using Hoeyer.OpcUa.Core.Entity.Node;
using Hoeyer.OpcUa.Core.Entity.State;
using Opc.Ua;
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

using Hoeyer.OpcUa.Core.Observation;
using Hoeyer.OpcUa.Core.Entity.Node;
using Hoeyer.OpcUa.Core.Entity.State;

namespace Hoeyer.OpcUa.Server.Generated
{
    public sealed class GantryEntityNodeFactory : IEntityNodeFactory<Gantry>
    {
        private readonly Gantry _state;
        public GantryEntityNodeFactory(Gantry state)
        {
            _state = state;
        }

        public IEntityNode Create(Gantry state, ushort applicationNamespaceIndex)
        {
            var entity = CreateEntityBaseObjectState(applicationNamespaceIndex);
            var properties = CreateProperties(_state, applicationNamespaceIndex, entity);
            return CreateEntityNode(entity, properties);
        }

        private static BaseObjectState CreateEntityBaseObjectState(ushort applicationNamespaceIndex)
        {
            BaseObjectState entity = new BaseObjectState(null)
            {
                BrowseName = new QualifiedName("Gantry", applicationNamespaceIndex),
                NodeId = new NodeId("Gantry", applicationNamespaceIndex),
                DisplayName = "Gantry",
            };
            entity.AccessRestrictions = AccessRestrictionType.None;
            return entity;
        }

        private static IEntityNode CreateEntityNode(BaseObjectState entity, IEnumerable<PropertyState> properties)
        {
            return new EntityNode(entity, properties.ToList());
        }

        private static IEnumerable<PropertyState> CreateProperties(Gantry state, ushort applicationNamespaceIndex, BaseObjectState entity)
        {
            PropertyState Speeds = entity.AddProperty<int>("Speeds", DataTypeIds.Int32, ValueRanks.OneDimension);
            Speeds.NodeId = new NodeId("Gantry.Speeds", applicationNamespaceIndex);
            Speeds.AccessLevel = AccessLevels.CurrentReadOrWrite;
            entity.AddReference(ReferenceTypes.HasProperty, false, Speeds.NodeId);
            Speeds.Value = state.Speeds;
            yield return Speeds;
            PropertyState message = entity.AddProperty<string>("message", DataTypeIds.String, ValueRanks.Scalar);
            message.NodeId = new NodeId("Gantry.message", applicationNamespaceIndex);
            message.AccessLevel = AccessLevels.CurrentReadOrWrite;
            entity.AddReference(ReferenceTypes.HasProperty, false, message.NodeId);
            message.Value = state.message;
            yield return message;
            PropertyState messages = entity.AddProperty<int>("messages", DataTypeIds.Int32, ValueRanks.OneDimension);
            messages.NodeId = new NodeId("Gantry.messages", applicationNamespaceIndex);
            messages.AccessLevel = AccessLevels.CurrentReadOrWrite;
            entity.AddReference(ReferenceTypes.HasProperty, false, messages.NodeId);
            messages.Value = state.messages;
            yield return messages;
        }
    }
}


