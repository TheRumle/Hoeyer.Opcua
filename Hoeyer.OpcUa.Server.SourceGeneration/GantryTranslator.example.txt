using Hoeyer.OpcUa.Core;
using MyOpcUaWebApplication;
using Opc.Ua;
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using Hoeyer.OpcUa.Core.Entity;
using Hoeyer.OpcUa.Core.Observation;
using Hoeyer.OpcUa.Core.Entity.Node;
using Hoeyer.OpcUa.Core.Entity.State;
using Opc.Ua;
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using Hoeyer.OpcUa.Core.Entity;
using Hoeyer.OpcUa.Core.Observation;
using Hoeyer.OpcUa.Core.Entity.Node;
using Hoeyer.OpcUa.Core.Entity.State;

namespace Hoeyer.OpcUa.Server.Generated
{
    public sealed class GantryTranslator : IEntityTranslator<Gantry>
    {
        public bool AssignToNode(Gantry state, IEntityNode node)
        {
            try
            {
                if (node.PropertyByBrowseName.ContainsKey("Speeds"))
                {
                    node.PropertyByBrowseName["Speeds"].Value = state.Speeds;
                }
                else
                {
                    return default;
                }

                if (node.PropertyByBrowseName.ContainsKey("message"))
                {
                    node.PropertyByBrowseName["message"].Value = state.message;
                }
                else
                {
                    return default;
                }

                if (node.PropertyByBrowseName.ContainsKey("messages"))
                {
                    node.PropertyByBrowseName["messages"].Value = state.messages;
                }
                else
                {
                    return default;
                }

                return true;
            }
            catch (Exception _)
            {
                return false;
            }
        }

        /// <inheritdoc/>
        public Gantry? Translate(IEntityNode state)
        {
            List<int> Speeds = DataTypeToTranslator.TranslateToCollection<List<int>, int>(state, "Speeds");
            if (Speeds == default)
                return null;
            string message = DataTypeToTranslator.TranslateToSingle<string>(state, "message");
            if (message == default)
                return null;
            HashSet<int> messages = DataTypeToTranslator.TranslateToCollection<HashSet<int>, int>(state, "messages");
            if (messages == default)
                return null;
            return new Gantry()
            {
                Speeds = Speeds message = message messages = messages
            }
        }
    }
}